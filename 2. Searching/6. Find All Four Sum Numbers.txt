/*
Given an array of integers and another number. Find all the unique quadruple from the given array that sums up to the given number.

Example 1:

Input:
N = 5, K = 3
A[] = {0,0,2,1,1}
Output: 0 0 1 2 $
Explanation: Sum of 0, 0, 1, 2 is equal
to K.
Example 2:

Input:
N = 7, K = 23
A[] = {10,2,3,4,5,7,8}
Output: 2 3 8 10 $2 4 7 10 $3 5 7 8 $
Explanation: Sum of 2, 3, 8, 10 = 23,
sum of 2, 4, 7, 10 = 23 and sum of 3,
5, 7, 8 = 23.
Your Task:
You don't need to read input or print anything. Your task is to complete the function fourSum() which takes the array arr[] and the integer k as its input and returns an array containing all the quadruples in a lexicographical manner. Also note that all the quadruples should be internally sorted, ie for any quadruple [q1, q2, q3, q4] the following should follow: q1 <= q2 <= q3 <= q4.  (In the output each quadruple is separate by $. The printing is done by the driver's code)

Expected Time Complexity: O(N3).
Expected Auxiliary Space: O(N2).

Constraints:
1 <= N <= 100
-1000 <= K <= 1000
-100 <= A[] <= 100
*/

class Solution{
    public:
    // arr[] : int input array of integers
    // k : the quadruple sum required
    vector<vector<int> > fourSum(vector<int> &arr, int k) {
        // Your code goes here
        unordered_map<int,vector<pair<int,int> > > um;
        int n = arr.size();
        um.reserve(n*n);
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                um[arr[i] + arr[j]].push_back(make_pair(i,j));
            }
        }
        unordered_map<int,vector<pair<int,int> > >::iterator it = um.begin();
        int target;
        vector<vector<int> > ans;
        set<vector<int> > s;
        while(it != um.end()) {
            target = k - it->first;
            unordered_map<int,vector<pair<int,int> > >::iterator itr = um.find(target);
            if(itr != um.end()) {
                for(int i=0;i<it->second.size();i++) {
                    for(int j=0;j<itr->second.size();j++) {
                        if(it->second[i].first!=itr->second[j].first && it->second[i].first!=itr->second[j].second && it->second[i].second!=itr->second[j].first && it->second[i].second!=itr->second[j].second) {
                            vector<int> v({arr[it->second[i].first],arr[it->second[i].second],arr[itr->second[j].first],arr[itr->second[j].second]});
                            sort(v.begin(),v.end());
                            if(s.find(v) == s.end()) {
                                ans.push_back(v);
                                s.insert(v);
                            }
                        }
                    }
                }
            }
            it = next(it);
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};