/*
Given two arrays X and Y of positive integers, find the number of pairs such that xy > yx (raised to power of) where x is an element from X and y is an element from Y.

Example 1:

Input: 
M = 3, X[] = [2 1 6] 
N = 2, Y[] = [1 5]
Output: 3
Explanation: 
The pairs which follow xy > yx are 
as such: 21 > 12,  25 > 52 and 61 > 16 .
Example 2:

Input: 
M = 4, X[] = [2 3 4 5]
N = 3, Y[] = [1 2 3]
Output: 5
Explanation: 
The pairs for the given input are 
21 > 12 , 31 > 13 , 32 > 23 , 41 > 14 , 
51 > 15 .

Your Task:
This is a function problem. You only need to complete the function countPairs() that takes X, Y, M, N as parameters and returns the total number of pairs.

Expected Time Complexity: O((N + M)log(N)).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ M, N ≤ 105
1 ≤ X[i], Y[i] ≤ 103
*/

class Solution{
    public:
    
    // X[], Y[]: input arrau
    // M, N: size of arrays X[] and Y[] respectively
    //Function to count number of pairs such that x^y is greater than y^x.
    long long countPairs(int X[], int Y[], int M, int N)
    {
       //Your code here
       sort(Y,Y+N);
       long long int ans = 0;
       for(int i=0;i<M;i++) {
           if(X[i]==0) {
               continue;
           }
           else if(X[i]==1) {
               ans += upper_bound(Y,Y+N,0) - lower_bound(Y,Y+N,0);
           }
           else {
               ans += upper_bound(Y,Y+N,0) - lower_bound(Y,Y+N,0);
               ans += upper_bound(Y,Y+N,1) - lower_bound(Y,Y+N,1);
               ans += N - (upper_bound(Y,Y+N,X[i]) - Y);
               if(X[i]==2) {
                    ans -= upper_bound(Y,Y+N,3) - lower_bound(Y,Y+N,3);
                    ans -= upper_bound(Y,Y+N,4) - lower_bound(Y,Y+N,4);
               }
               else if(X[i]==3) {
                   ans += upper_bound(Y,Y+N,2) - lower_bound(Y,Y+N,2);
               }
           }
       }
       return ans;
    }
};