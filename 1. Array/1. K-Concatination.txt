/*
Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains two space-separated integers N and K.
The second line contains N space-separated integers A0, A1, ..., AN-1.
Output
For each test case, print a single line containing the maximum subarray sum of B.

Constraints
1 ≤ T ≤ 10
1 ≤ N ≤ 105
1 ≤ K ≤ 105
-106 ≤ Ai ≤ 106 for each valid i
Subtasks
Subtask #1 (18 points): N · K ≤ 105

Subtask #2 (82 points): original constraints

Example
Input:

2
2 3
1 2
3 2
1 -2 1

Output:

9
2
Explanation
Example case 1: B = {1, 2, 1, 2, 1, 2} and the subarray with maximum sum is the whole {1, 2, 1, 2, 1, 2}. Hence, the answer is 9.

Example case 2: B = {1, -2, 1, 1, -2, 1} and the subarray with maximum sum is {1, 1}. Hence, the answer is 2.
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define int long long
#define ll long long

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> PBDS;

#define mod 1000000007

void solve() {
	int t = 1;
	cin >> t;
	while (t--) {
		int n, k;
		cin >> n >> k;
		vector<int> v(n);
		for (int i = 0; i < n; i++) {
			cin >> v[i];
		}
		int max_sum = -1e9;
		int sum = 0;
		int tot_sum = 0;
		for (int i = 0; i < n; i++) {
			sum += v[i];
			tot_sum += v[i];
			max_sum = max(max_sum, sum);
			if (sum < 0) {
				sum = 0;
			}
		}
		sum = 0;
		int max_prefix_sum = -1e9;
		for (int i = 0; i < n; i++) {
			sum += v[i];
			max_prefix_sum = max(max_prefix_sum, sum);
		}
		int max_suffix_sum = -1e9;
		sum = 0;
		for (int i = n - 1; i >= 0; i--) {
			sum += v[i];
			max_suffix_sum = max(max_suffix_sum, sum);
		}
		if (k == 1) {
			cout << max_sum;
		}
		else if (k == 2) {
			cout << max({tot_sum + max_suffix_sum, max_suffix_sum + tot_sum, max_sum, max_prefix_sum + max_suffix_sum});
		}
		else {
			cout << max({k * tot_sum, max_sum, max_prefix_sum + max_suffix_sum, (k - 2)*tot_sum + max_suffix_sum + max_prefix_sum});
		}
		cout << "\n";
	}
}


int32_t main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	solve();
	return 0;
}