/*
Given a matrix mat of size N x M where every element is either ‘O’ or ‘X’.
Replace all ‘O’ with ‘X’ that are surrounded by ‘X’.
A ‘O’ (or a set of ‘O’) is considered to be by surrounded by ‘X’ if there are ‘X’ at locations just below, just above, just left and just right of it.

Example 1:

Input: n = 5, m = 4
mat = {{'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: ans = {{'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'O', 'O'}}
Explanation: Following the rule the above 
matrix is the resultant matrix. 
Your Task:
You do not need to read input or print anything. Your task is to complete the function fill() which takes n, m and mat as input parameters ad returns a 2D array representing the resultant matrix.

Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Constraints:
1 ≤ n, m ≤ 500
*/

int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};
class Solution{
public:
    void fill_matrix(vector<vector<char>> &mat,int i,int j,vector<vector<bool>> &visited) {
        vector<pair<int,int> > nodes;
        queue<pair<int,int> > qu;
        qu.push(make_pair(i,j));
        visited[i][j] = true;
        nodes.push_back(make_pair(i,j));
        bool surrounded = true;
        while(!qu.empty()) {
            int x = qu.front().first;
            int y = qu.front().second;
            qu.pop();
            if(x==0 || x+1==mat.size() || y==0 || y+1==mat[0].size()) {
                surrounded = false;
            }
            for(int l=0;l<4;l++) {
                int p = x + dx[l];
                int q = y + dy[l];
                if(p>=0 && q>=0 && p<mat.size() && q<mat[0].size() && !visited[p][q] && mat[p][q]=='O') {
                    visited[p][q] = true;
                    qu.push(make_pair(p,q));
                    nodes.push_back(make_pair(p,q));
                }
            }
        }
        if(surrounded) {
            for(auto &item : nodes) {
                mat[item.first][item.second] = 'X';
            }
        }
    }
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        // code here
        vector<vector<bool> > visited(n,vector<bool>(m,false));
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(!visited[i][j]) {
                    if(mat[i][j]=='O') {
                        fill_matrix(mat,i,j,visited);
                    }
                }
            }
        }
        return mat;
    }
};