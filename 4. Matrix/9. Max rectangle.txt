class Solution{
  public:
    int area_under_histogram(vector<int> &hist,int m) {
        vector<int> left(m),right(m);
        stack<int> s;
        for(int i=0;i<m;i++) {
            while(!s.empty() && hist[s.top()] >= hist[i]) {
                s.pop();
            }
            left[i] = (s.empty())?-1:s.top();
            s.push(i);
        }
        while(!s.empty()) {
            s.pop();
        }
        for(int i=m-1;i>=0;i--) {
            while(!s.empty() && hist[s.top()] >= hist[i]) {
                s.pop();
            }
            right[i] = (s.empty())?m:s.top();
            s.push(i);
        }
        int ans = 0;
        for(int i=0;i<m;i++) {
            ans = max(ans,(right[i]-left[i]-1)*hist[i]);
        }
        return ans;
    }
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
        vector<int> hist(m);
        int ans = 0;
        for(int i=n-1;i>=0;i--) {
            for(int j=0;j<m;j++) {
                if(M[i][j]) {
                    hist[j] += 1;
                }
                else {
                    hist[j] = 0;
                }
            }
            ans = max(ans,area_under_histogram(hist,m));
        }
        return ans;
    }
};