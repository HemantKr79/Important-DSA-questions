int dx[] = {-2,-2,-1,1,2,2,1,-1};
int dy[] = {-1,1,2,2,1,-1,-2,-2};

class Solution {
public:
	int minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N){
	    // Code here
	    vector<vector<int> > board(N+1,vector<int>(N+1,1e9));
	    int i = KnightPos[0];
	    int j = KnightPos[1];
	    queue<pair<int,int> > q;
	    q.push(make_pair(i,j));
	    board[i][j] = 0;
	    int target_x = TargetPos[0];
	    int target_y = TargetPos[1];
	    while(!q.empty()) {
	        i = q.front().first;
	        j = q.front().second;
	        q.pop();
	        for(int l=0;l<8;l++) {
	            int x = i + dx[l];
	            int y = j + dy[l];
	            if(x>=1 && y>=1 && x<=N && y<=N && board[x][y] > board[i][j] + 1) {
	                board[x][y] = board[i][j] + 1;
	                q.push(make_pair(x,y));
	            }
	        }
	    }
	    return board[target_x][target_y];
	}
};